{"version":3,"sources":["features/SingleSlide/styles.module.scss","features/PastTimeCard/styles.module.scss","features/AppHeader/styles.module.scss","styles.module.scss","features/EmptyCard/styles.module.scss","features/CitiesSelect/styles.module.scss","features/Slider/styles.module.scss","features/Spinner/styles.module.scss","features/WeatherCard/styles.module.scss","features/DateSelect/styles.module.scss","features/ErrorMessage/styles.module.scss","features/SevenDaysBlock/styles.module.scss","features/HistoryFcBlock/styles.module.scss","features/AppHeader/HeaderText.tsx","features/AppHeader/index.tsx","features/CitiesSelect/citiesArray.ts","features/CitiesSelect/index.tsx","features/SingleSlide/index.tsx","app/hooks.ts","features/Spinner/index.tsx","assests/Placeholder/Academy-Weather-bg160.svg","features/EmptyCard/index.tsx","features/ErrorMessage/index.tsx","features/Slider/index.tsx","features/WeatherCard/index.tsx","app/http.ts","app/sliderSlice.ts","features/SevenDaysBlock/index.tsx","features/PastTimeCard/index.tsx","features/DateSelect/index.tsx","app/pastTimeSlice.ts","features/HistoryFcBlock/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","HeaderText","text","className","classes","header__text","titles","AppHeader","header","map","title","i","name","coordinates","lat","lon","CitiesSelect","value","changeHandler","select","onChange","event","target","cities","filter","city","filtered","hidden","select__element","SingleSlide","date","temperature","icon","formatedDate","format","Date","fromUnixTime","iconUrl","tempsArray","Object","values","medianTemp","reduce","sum","cur","length","slide","slide__date","src","alt","slide__image","slide__temperature","toFixed","useAppSelector","useSelector","Spinner","spinner","EmptyCard","image","ErrorMessage","message","SwiperCore","use","Navigation","A11y","Slider","store","sliderSlice","daily","status","spaceBetween","slidesPerView","navigation","breakpoints","819","forecast","dt","weather","temp","WeatherCard","children","container","container__title","axiosInstance","axios","create","baseURL","process","interceptors","request","config","params","appid","units","exclude","error","console","log","response","axiosResponse","data","getSevenDaysForecast","createAsyncThunk","dispatch","get","then","dailyForecast","fullFilledRequest","catch","rejectedRequest","createSlice","initialState","reducers","state","action","payload","extraReducers","builder","addCase","pending","actions","SevenDaysBlock","useState","setValue","setCoordinates","useDispatch","useEffect","form","obj","PastTimeCard","pastTimeSlice","currentForecast","container__date","container__image","container__temperature","DateSelect","changeDate","daysList","day","startOfCurDay","startOfDay","subDays","getUnixTime","getHistoryForecast","requestData","historyForecast","fullfilledRequest","hourly","HistoryFcBlock","setDate","App","content","footer","configureStore","reducer","sliderSliceReducer","pastTimeSliceReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58bdcc8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide\":\"styles_slide__f2F4j\",\"slide__image\":\"styles_slide__image__378Rf\",\"slide__date\":\"styles_slide__date__2zJmb\",\"slide__temperature\":\"styles_slide__temperature__2EXMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1O7gE\",\"container__date\":\"styles_container__date__2Zvfo\",\"container__image\":\"styles_container__image__3kTOi\",\"container__temperature\":\"styles_container__temperature__1X1g8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3aske\",\"header__text\":\"styles_header__text__3r6ig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__UfWpO\",\"footer\":\"styles_footer__3Ike9\",\"content\":\"styles_content__26K5d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"empty-card\":\"styles_empty-card__3l_pq\",\"empty-card__image\":\"styles_empty-card__image__GCqW4\",\"empty-card__text\":\"styles_empty-card__text__1Qcid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"styles_select__1HTbq\",\"select__element\":\"styles_select__element__245dC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sl-container\":\"styles_sl-container__3AzZl\",\"sl-container__slide\":\"styles_sl-container__slide__OseG_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spin-wrapper\":\"styles_spin-wrapper__ijLZB\",\"spinner\":\"styles_spinner__3U4P_\",\"spin\":\"styles_spin__2fObO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2Bxm9\",\"container__title\":\"styles_container__title__1Aw8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"styles_select__39xFu\",\"select__element\":\"styles_select__element__2jcYA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"styles_message__2Otic\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3pluX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3R-D5\"};","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\n\r\ninterface Props {\r\n    text: string;\r\n}\r\n\r\nconst HeaderText: FC<Props> = ({ text }) => {\r\n  return (\r\n        <h1 className={classes.header__text}>{text}</h1>\r\n  )\r\n}\r\n\r\nexport default HeaderText\n","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport HeaderText from './HeaderText'\r\n\r\nconst titles: Array<string> = ['Weather', 'forecast']\r\n\r\nconst AppHeader: FC = () => {\r\n  return (\r\n        <header className={classes.header}>\r\n            {\r\n                titles.map((title, i) => (\r\n                    <HeaderText key={i} text={title} />\r\n                ))\r\n            }\r\n        </header>\r\n  )\r\n}\r\n\r\nexport default AppHeader\r\n","export default [\r\n  {\r\n    name: 'Самара',\r\n    coordinates: { lat: 53.195873, lon: 50.100193 }\r\n  },\r\n  {\r\n    name: 'Тольятти',\r\n    coordinates: { lat: 53.507836, lon: 49.420393 }\r\n  },\r\n  {\r\n    name: 'Саратов',\r\n    coordinates: { lat: 51.533557, lon: 46.034257 }\r\n  },\r\n  {\r\n    name: 'Казань',\r\n    coordinates: { lat: 55.796127, lon: 49.106405 }\r\n  },\r\n  {\r\n    name: 'Краснодар',\r\n    coordinates: { lat: 45.035470, lon: 38.975313 }\r\n  }\r\n]\r\n","import React, { FC, useState, ChangeEvent } from 'react'\r\nimport cities from './citiesArray'\r\nimport classes from './styles.module.scss'\r\n\r\ninterface IProps {\r\n  value: string;\r\n  changeHandler: (args: any) => void;\r\n}\r\n\r\nconst CitiesSelect: FC<IProps> = ({ value, changeHandler }) => {\r\n  return (\r\n    <select\r\n      className={classes.select}\r\n      value={value}\r\n      onChange={(event: ChangeEvent<HTMLSelectElement>) => {\r\n        const { value } = event.target\r\n        const [filtered] = cities.filter(city => city.name === value)\r\n        changeHandler(filtered)\r\n      }}\r\n    >\r\n      <option hidden value=\"\">Select city</option>\r\n      {\r\n        cities.map(city => {\r\n          const { name, coordinates } = city\r\n          return <option\r\n            key={name}\r\n            value={name}\r\n            {...coordinates}\r\n            className={classes.select__element}\r\n          >\r\n            {name}\r\n          </option>\r\n        })\r\n      }\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default CitiesSelect\r\n","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport { format } from 'date-fns'\r\nimport { ITemp } from '../../app/sliderSlice'\r\nimport fromUnixTime from 'date-fns/fromUnixTime'\r\n\r\ninterface IProps {\r\n  date: number;\r\n  temperature: ITemp;\r\n  icon: string;\r\n}\r\n\r\nconst SingleSlide: FC<IProps> = ({ date, temperature, icon }) => {\r\n  const formatedDate = format(new Date(fromUnixTime(date)), 'dd MMMM yyyy')\r\n  const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n  const tempsArray = Object.values(temperature)\r\n  const medianTemp = tempsArray.reduce((sum, cur) => sum += cur, 0) / tempsArray.length\r\n\r\n  return (\r\n    <section className={classes.slide}>\r\n      <span className={classes.slide__date}>{formatedDate}</span>\r\n      <img\r\n        src={iconUrl}\r\n        alt=\"forecast\"\r\n        className={classes.slide__image}\r\n      />\r\n      <span className={classes.slide__temperature}>{medianTemp.toFixed()}°</span>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SingleSlide\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import React from 'react'\r\nimport classes from './styles.module.scss'\r\n\r\nconst Spinner = () => (\r\n    <div className={classes['spin-wrapper']}>\r\n        <div className={classes.spinner}>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Spinner\n","export default __webpack_public_path__ + \"static/media/Academy-Weather-bg160.1a743710.svg\";","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport image from '../../assests/Placeholder/Academy-Weather-bg160.svg'\r\n\r\nconst EmptyCard: FC = () => {\r\n  return (\r\n    <div className={classes['empty-card']}>\r\n      <img\r\n        className={classes['empty-card__image']}\r\n        src={image}\r\n        alt=\"make a choice\" />\r\n      <span\r\n        className={classes['empty-card__text']}\r\n      >\r\n        Fill in all the fields and the weather will be displayed\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmptyCard\r\n","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\n\r\nconst ErrorMessage: FC = () => {\r\n  return (\r\n    <div className={classes.message}>\r\n      OOOPS!!Something was going wrong...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import React, { FC } from 'react'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport SwiperCore, { Navigation, A11y } from 'swiper'\r\nimport 'swiper/swiper.scss'\r\nimport 'swiper/components/navigation/navigation.scss'\r\nimport SingleSlide from '../SingleSlide'\r\nimport { useAppSelector } from '../../app/hooks'\r\nimport classes from './styles.module.scss'\r\nimport Spinner from '../Spinner'\r\nimport EmptyCard from '../EmptyCard'\r\nimport ErrorMessage from '../ErrorMessage'\r\n\r\nSwiperCore.use([Navigation, A11y])\r\n\r\nconst Slider: FC = () => {\r\n  const { daily, status } = useAppSelector(store => store.sliderSlice)\r\n\r\n  // Обработка загрузки, ошибок и пустой карточки\r\n  if (status === 'failed') return <ErrorMessage />\r\n  if (status === 'loading') return <Spinner />\r\n  if (!daily.length) return <EmptyCard />\r\n\r\n  return (\r\n    <div className={classes['sl-container']}>\r\n      <Swiper\r\n        spaceBetween={16}\r\n        slidesPerView={'auto'}\r\n        navigation\r\n        breakpoints={{\r\n          819: {\r\n            slidesPerView: 3\r\n          }\r\n        }}\r\n      >\r\n        {\r\n          daily.map((forecast) => {\r\n            const { dt, weather, temp } = forecast\r\n            return <SwiperSlide className={classes['sl-container__slide']} key={dt}>\r\n              <SingleSlide\r\n                date={dt}\r\n                temperature={temp}\r\n                icon={weather[0].icon}\r\n              />\r\n            </SwiperSlide>\r\n          })\r\n        }\r\n      </Swiper>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\n\r\nconst cities: Array<string> = ['Самара', 'Тольятти', 'Саратов', 'Казань', 'Краснодар']\r\n\r\ninterface IProps {\r\n  title: string;\r\n  children?: React.ReactChild | React.ReactNode;\r\n}\r\n\r\nconst WeatherCard: FC<IProps> = ({ title, children }) => {\r\n  return (\r\n    <article className={classes.container}>\r\n      <h2 className={classes.container__title}>{title}</h2>\r\n      {children}\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","import axios from 'axios'\r\n\r\nexport const rootBackendUrl = process.env.REACT_APP_ROOT_BACKEND_URL\r\nconst appId = process.env.REACT_APP_API_KEY\r\n\r\nexport const axiosInstance = axios.create({\r\n  baseURL: rootBackendUrl\r\n})\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    config.params = {\r\n      appid: appId,\r\n      units: 'metric',\r\n      exclude: 'hourly,minutely,alerts'\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    console.log(error)\r\n  }\r\n)\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (axiosResponse) => axiosResponse.data,\r\n  (error) => {\r\n    console.log(error)\r\n  }\r\n)\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { RootState, AppThunk } from './store'\r\n// import { SliderResponse, SliderState } from './types'\r\nimport { axiosInstance } from './http'\r\n\r\nexport interface IWeather {\r\n  id: number\r\n  main: string\r\n  description: string\r\n  icon: string\r\n}\r\n\r\nexport interface ITemp {\r\n  day: number\r\n  eve: number\r\n  max: number\r\n  min: number\r\n  morn: number\r\n  night: number\r\n}\r\n\r\nexport interface IForecastObj {\r\n  dt: number\r\n  temp: ITemp\r\n  weather: IWeather[]\r\n}\r\n\r\nexport interface IServerResponse {\r\n  daily: IForecastObj[];\r\n}\r\n\r\nexport interface ISliderState {\r\n  daily: IForecastObj[];\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\ninterface ICoordinates {\r\n  lat: number;\r\n  lon: number;\r\n}\r\n\r\nexport const getSevenDaysForecast = createAsyncThunk(\r\n  'slider/getSevenDaysForecast',\r\n  (coordinates: ICoordinates, { dispatch }) => {\r\n    const { lat, lon } = coordinates\r\n    axiosInstance.get<IServerResponse>(`onecall?lat=${lat}&lon=${lon}`)\r\n      .then(response => {\r\n        dispatch(dailyForecast(response))\r\n        dispatch(fullFilledRequest())\r\n      })\r\n      .catch(() => dispatch(rejectedRequest()))\r\n  })\r\n\r\nconst initialState: ISliderState = {\r\n  daily: [],\r\n  status: 'idle'\r\n}\r\n\r\nconst sliderSlice = createSlice({\r\n  name: 'slider',\r\n  initialState,\r\n  reducers: {\r\n    dailyForecast: (state, action) => {\r\n      state.daily = action.payload.daily\r\n    },\r\n    fullFilledRequest: (state) => {\r\n      state.status = 'idle'\r\n    },\r\n    rejectedRequest: (state) => {\r\n      state.status = 'failed'\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getSevenDaysForecast.pending, (state) => {\r\n        state.status = 'loading'\r\n      })\r\n  }\r\n})\r\n\r\nexport const { dailyForecast, fullFilledRequest, rejectedRequest } = sliderSlice.actions\r\n\r\nexport default sliderSlice.reducer\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport CitiesSelect from '../CitiesSelect'\r\nimport Slider from '../Slider'\r\nimport WeatherCard from '../WeatherCard'\r\nimport classes from './styles.module.scss'\r\nimport { getSevenDaysForecast } from '../../app/sliderSlice'\r\nimport { useAppDispatch } from '../../app/hooks'\r\nimport { useDispatch } from 'react-redux'\r\n\r\ninterface ICoordinates {\r\n  lat: number;\r\n  lon: number;\r\n}\r\n\r\ninterface ISelectedCity {\r\n  name: string;\r\n  coordinates: ICoordinates;\r\n}\r\n\r\nconst SevenDaysBlock: FC = () => {\r\n  const [value, setValue] = useState<string>('')\r\n  const [coordinates, setCoordinates] = useState<ICoordinates | null>()\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (value && coordinates) {\r\n      dispatch(getSevenDaysForecast(coordinates))\r\n    }\r\n  }, [value])\r\n\r\n  const onChangeHandler = (obj: ISelectedCity) => {\r\n    const { name, coordinates } = obj\r\n    setValue(name)\r\n    setCoordinates(coordinates)\r\n  }\r\n\r\n  return (\r\n    <WeatherCard\r\n      title=\"7 Days Forecast\"\r\n    >\r\n      <form className={classes.form}>\r\n        <CitiesSelect value={value} changeHandler={onChangeHandler} />\r\n      </form>\r\n      <Slider />\r\n    </WeatherCard>\r\n  )\r\n}\r\n\r\nexport default SevenDaysBlock\r\n","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport { useAppSelector } from '../../app/hooks'\r\nimport { format } from 'date-fns'\r\nimport Spinner from '../Spinner'\r\nimport fromUnixTime from 'date-fns/fromUnixTime'\r\nimport EmptyCard from '../EmptyCard'\r\nimport ErrorMessage from '../ErrorMessage'\r\n\r\nconst PastTimeCard: FC = () => {\r\n  const { currentForecast, status } = useAppSelector(store => store.pastTimeSlice)\r\n  // Обработка загрузкиб ошибки и пустой карточки\r\n  if (status === 'failed') return <ErrorMessage />\r\n  if (status === 'loading') return <Spinner />\r\n  if (!currentForecast) return <EmptyCard />\r\n\r\n  const { dt, temp, weather } = currentForecast\r\n  const { icon } = weather[0]\r\n  const formatedDate = format(new Date(fromUnixTime(dt)), 'dd MMMM yyyy')\r\n  const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n  return (\r\n    <section className={classes.container}>\r\n      <span className={classes.container__date}>{formatedDate}</span>\r\n      <img\r\n        src={iconUrl}\r\n        alt=\"forecast\"\r\n        className={classes.container__image}\r\n      />\r\n      <span className={classes.container__temperature}>{temp.toFixed()}°</span>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PastTimeCard\r\n","import React, { FC, ChangeEvent } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport { subDays, getUnixTime, format, startOfDay, fromUnixTime } from 'date-fns'\r\n\r\ninterface IProps {\r\n  value: number;\r\n  changeDate: (date: string) => void;\r\n}\r\n\r\nconst DateSelect: FC<IProps> = ({ value, changeDate }) => {\r\n  const daysList = [0, 1, 2, 3, 4].map(day => {\r\n    const startOfCurDay = startOfDay(subDays(new Date(), day))\r\n    return getUnixTime(startOfCurDay)\r\n  })\r\n\r\n  return (\r\n    <select\r\n      className={classes.select}\r\n      value={value}\r\n      onChange={(event: ChangeEvent<HTMLSelectElement>) => {\r\n        changeDate(event.target.value)\r\n      }}\r\n    >\r\n      <option hidden value=\"\">Select date</option>\r\n      {\r\n        daysList.map(day => {\r\n          return <option\r\n            key={day}\r\n            value={day}\r\n            className={classes.select__element}\r\n          >\r\n            {format(fromUnixTime(day), 'dd-MMMM-yyyy')}\r\n          </option>\r\n        })\r\n      }\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default DateSelect\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { axiosInstance } from './http'\r\n\r\ninterface ICurForecast {\r\n  dt: number;\r\n  temp: number;\r\n  weather: [{icon: string}];\r\n}\r\n\r\ninterface IResponseData {\r\n  current: ICurForecast;\r\n  hourly: ICurForecast[];\r\n}\r\n\r\ninterface IPastTimeState {\r\n  currentForecast: ICurForecast | null;\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\ninterface IPayload {\r\n    date: number;\r\n    lat: number;\r\n    lon: number;\r\n}\r\n\r\nexport const getHistoryForecast = createAsyncThunk(\r\n  'pastTime/getHistoryForecast',\r\n  (requestData: IPayload, { dispatch }) => {\r\n    const { date, lon, lat } = requestData\r\n    axiosInstance.get<IResponseData>(`onecall/timemachine?lat=${lat}&lon=${lon}&dt=${date}`)\r\n      .then(response => {\r\n        dispatch(historyForecast(response))\r\n        dispatch(fullfilledRequest())\r\n      })\r\n      .catch(() => {\r\n        dispatch(rejectedRequest())\r\n      })\r\n  })\r\n\r\nconst initialState: IPastTimeState = {\r\n  currentForecast: null,\r\n  status: 'idle'\r\n}\r\n\r\nconst pastTimeSlice = createSlice({\r\n  name: 'pastTime',\r\n  initialState,\r\n  reducers: {\r\n    historyForecast: (state, action) => {\r\n      const { hourly } = action.payload\r\n      // Темпратура в полдень. Выбрал один промежуток времени\r\n      // Можно расчитать среднюю. Но лучше сменить интерфейс\r\n      // и сделать две вкладки с возможностью выбора кокретного времени\r\n      state.currentForecast = hourly[12]\r\n    },\r\n    fullfilledRequest: (state) => {\r\n      state.status = 'idle'\r\n    },\r\n    rejectedRequest: (state) => {\r\n      state.status = 'failed'\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getHistoryForecast.pending, (state) => {\r\n        state.status = 'loading'\r\n      })\r\n  }\r\n})\r\n\r\nexport default pastTimeSlice.reducer\r\n\r\nexport const {\r\n  historyForecast,\r\n  fullfilledRequest,\r\n  rejectedRequest\r\n} = pastTimeSlice.actions\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport CitiesSelect from '../CitiesSelect'\r\nimport PastTimeCard from '../PastTimeCard'\r\nimport WeatherCard from '../WeatherCard'\r\nimport DateSelect from '../DateSelect'\r\nimport { getHistoryForecast } from '../../app/pastTimeSlice'\r\nimport { useAppDispatch } from '../../app/hooks'\r\n\r\ninterface ICoordinates {\r\n  lat: number;\r\n  lon: number;\r\n}\r\n\r\ninterface ISelectedCity {\r\n  name: string;\r\n  coordinates: ICoordinates;\r\n}\r\n\r\nconst HistoryFcBlock: FC = () => {\r\n  const [value, setValue] = useState<string>('')\r\n  const [coordinates, setCoordinates] = useState<ICoordinates | null>()\r\n  const [date, setDate] = useState<string>('')\r\n  const dispatch = useAppDispatch()\r\n\r\n  const onHandleChange = (obj: ISelectedCity) => {\r\n    const { name, coordinates } = obj\r\n    setValue(name)\r\n    setCoordinates(coordinates)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (value && date && coordinates) {\r\n      const requestData = { ...coordinates, date: +date }\r\n      dispatch(getHistoryForecast(requestData))\r\n    }\r\n  }, [value, date])\r\n\r\n  return (\r\n    <WeatherCard\r\n      title=\"Forecast for a Date in the Past\"\r\n    >\r\n      <form className={classes.form}>\r\n        <CitiesSelect value={value} changeHandler={onHandleChange} />\r\n        <DateSelect value={+date} changeDate={(date: string) => setDate(date)} />\r\n      </form>\r\n      <PastTimeCard />\r\n    </WeatherCard>\r\n  )\r\n}\r\n\r\nexport default HistoryFcBlock\r\n","import React, { FC, useEffect } from 'react'\nimport classes from './styles.module.scss'\nimport AppHeader from './features/AppHeader'\n// import ForecastsBlock from './features/ForecastsBlock'\n// import { getSevenDaysForecast } from './app/sliderSlice'\n// import { useAppDispatch } from './app/hooks'\n// import { getHistoryForecast } from './app/pastTimeSlice'\nimport SevenDaysBlock from './features/SevenDaysBlock'\nimport HistoryFcBlock from './features/HistoryFcBlock'\n\ninterface Props { }\n\nexport const App: FC<Props> = () => {\n  // const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    // dispatch(getSevenDaysForecast())\n    // dispatch(getHistoryForecast())\n  }, [])\n\n  return (\n    <div className={classes.container}>\n      <AppHeader />\n      <main className={classes.content}>\n        <SevenDaysBlock />\n        <HistoryFcBlock />\n      </main>\n      <footer className={classes.footer}>\n        с любовью от mercury development\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport sliderSliceReducer from './sliderSlice'\nimport pastTimeSliceReducer from './pastTimeSlice'\n\nexport const store = configureStore({\n  reducer: {\n    sliderSlice: sliderSliceReducer,\n    pastTimeSlice: pastTimeSliceReducer\n  }\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}